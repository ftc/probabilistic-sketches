var obs = [ [4,81], [6,241],[10,1041]]

var ADD = 1
var POW = 2
var VARI = 3
var NUM = 4

var interp = function (i, ast){
	if(ast[0] == NUM){
		return ast[1];	
	}else if(ast[0] == POW){
		return Math.pow(interp(i,ast[1]),ast[2]);
	}else if(ast[0] == VARI){
		return i;
	}else if(ast[0] == ADD){
		return interp(i,ast[1]) + interp(i,ast[2])
	}
}

var map = function(obs,f){
	if(obs.length == 0){
		return []
	}else{
		var tail = obs.slice(1)
		var head = obs[0]
		return [f(head)].concat(map(tail,f))
	}
}
var repeat = function(n,f){
	if(n == 0){
		return []
	}else{
		return [f()].concat(repeat(n-1,f))
	}
}

var nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
var probFromNum = function(n){return 1/n}
var catInpt = { ps:map(nums,probFromNum), vs:nums}

var genNum = function(){
	return sample(Categorical(catInpt))
}

var genAst = function(){
	var choice = sample(Categorical({ps: [2,1,3,4],vs:[ADD,POW,VARI,NUM]}))
	if(choice == ADD){
		return [ADD,genAst(), genAst()];
	}else if(choice == POW){
		return [POW,genAst(),genNum()];
	}else if(choice == VARI){
		return [VARI];
	}else if(choice == NUM){
		return [NUM, genNum()];
	}
}

//execute a model
//map (inputs,function(f){return interp(f,[POW,[VARI],2])} )

//generate a model
//repeat(1,genAst)

var model = function(){
	var a = genAst();
	var freq = function(i){
		factor( interp(i[0],a) == i[1]? 0 : -Infinity );
	}
	map(obs,freq);
	return a;
}

Infer({method: 'MCMC', samples: 1000, lag: 100, burn: 5, model: model});
